{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","console","log","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAEvC,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBAGFN,EAAc,CAACE,GAAF,mBAAiBH,KAC9BI,EAAc,KAId,SACE,uBACEI,KAAK,OACLC,MAAQN,EACRO,SAjBoB,SAACJ,GACzBF,EAAcE,EAAEK,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAadM,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEvBoB,QAAQC,IAAIrB,GACZ,MCJ0B,SAACA,GAC3B,MAA0BX,mBAAU,CAClCkB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACR1B,EAAQC,GACL0B,MAAM,SAAAb,GACLc,YAAY,WACVH,EAAS,CACPjB,KAAMM,EACNS,SAAS,MAEV,UAEN,CAACtB,IAEGuB,EDdyBK,CAAa5B,GAAhCa,EAAb,EAAON,KAAce,EAArB,EAAqBA,QAErB,OACE,qCACE,6BAAKtB,IACJsB,GAAW,mBAAGN,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAoB,GAAK,OACf,cAAC,EAAD,eAEMA,GADCA,EAAMlB,aEOVmB,EApBM,WAEnB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAOF,EAAP,KAAmBC,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaD,WAAcA,EAAYC,cAAiBA,IACxD,uBAEED,EAAWsB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAYA,GADLA,U,MCXnB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.0d8c7c5f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({categories, setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('');\n  \n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    //setCategories(cats => [...cats, inputValue]);\n    setCategories([inputValue, ...categories]);\n    setInputValue('');\n  }\n  \n  return (\n    <form onSubmit={handleSubmit} >\n      <input \n        type=\"text\"\n        value= {inputValue}\n        onChange={ handleInputChange }\n      />\n    </form>\n  );    \n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Q0skW5FQXD3KK71Rhq41AvNEURac3RXS`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  });\n\n  return gifs;\n}","import React from 'react';\n\nexport const GifGridItem = ({id, title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n  console.log(category);\n  const {data: images, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n      <div className=\"card-grid\">\n        {\n          images.map( image => (\n            <GifGridItem\n              key={image.id}\n              {...image}\n            />\n          ))\n        }\n      </div>\n    </>  \n  )\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState( {\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then( images => {\n        setTimeout (() => {\n          setState({\n            data: images,\n            loading: false\n          });\n        }, 3000);\n      })\n  }, [category]);\n\n  return state;\n}","import React, {useState} from 'react';\nimport {AddCategory} from './components/AddCategory';\nimport {GifGrid} from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['metallica']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory categories = {categories} setCategories = {setCategories}/>\n      <hr/>\n      {\n        categories.map(category => (\n          <GifGrid \n            key = {category}\n            category = {category} />\n        ))\n      }  \n    </>\n  );    \n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));"],"sourceRoot":""}